@startuml
class refactoring_guru.factory_method.example.Demo {
- {static} Dialog dialog
+ {static} void main(String[])
~ {static} void configure()
~ {static} void runBusinessLogic()
}
note top of refactoring_guru.factory_method.example.Demo

 * EN: Demo class. Everything comes together here.
 *
 * RU: Демо-класс. Здесь всё сводится воедино.
 
end note


note left of refactoring_guru.factory_method.example.Demo::configure()

     * EN: The concrete factory is usually chosen depending on configuration or
     * environment options.
     *
     * RU: Приложение создаёт определённую фабрику в зависимости от конфигурации
     * или окружения.
     
end note
note right of refactoring_guru.factory_method.example.Demo::runBusinessLogic()

     * EN: All of the client code should work with factories and products
     * through abstract interfaces. This way it does not care which factory it
     * works with and what kind of product it returns.
     *
     * RU: Весь остальной клиентский код работает с фабрикой и продуктами только
     * через общий интерфейс, поэтому для него неважно какая фабрика была
     * создана.
     
end note

abstract class refactoring_guru.factory_method.example.factory.Dialog {
+ void renderWindow()
+ {abstract}Button createButton()
}
note top of refactoring_guru.factory_method.example.factory.Dialog

 * EN: Base factory class. Note that "factory" is merely a role for the class.
 * It should have some core business logic which needs different products to be
 * created.
 *
 * RU: Базовый класс фабрики. Заметьте, что "фабрика" – это всего лишь
 * дополнительная роль для класса. Он уже имеет какую-то бизнес-логику, в
 * которой требуется создание разнообразных продуктов.
 
end note

note left of refactoring_guru.factory_method.example.factory.Dialog::createButton()

     * EN: Subclasses will override this method in order to create specific
     * button objects.
     *
     * RU: Подклассы будут переопределять этот метод, чтобы создавать конкретные
     * объекты продуктов, разные для каждой фабрики.
     
end note

interface refactoring_guru.factory_method.example.buttons.Button {
~ void render()
~ void onClick()
}
note top of refactoring_guru.factory_method.example.buttons.Button

 * EN: Common interface for all buttons.
 *
 * RU: Общий интерфейс для всех продуктов.
 
end note


class refactoring_guru.factory_method.example.buttons.WindowsButton {
~ JPanel panel
~ JFrame frame
~ JButton button
+ void render()
+ void onClick()
}
note top of refactoring_guru.factory_method.example.buttons.WindowsButton

 * EN: Windows button implementation.
 *
 * RU: Реализация нативных кнопок операционной системы.
 
end note



class refactoring_guru.factory_method.example.buttons.HtmlButton {
+ void render()
+ void onClick()
}
note top of refactoring_guru.factory_method.example.buttons.HtmlButton

 * EN: HTML button implementation.
 *
 * RU: Реализация HTML кнопок.
 
end note


class refactoring_guru.factory_method.example.factory.WindowsDialog {
+ Button createButton()
}
note top of refactoring_guru.factory_method.example.factory.WindowsDialog

 * EN: Windows Dialog will produce Windows buttons.
 *
 * RU: Диалог на элементах операционной системы.
 
end note


class refactoring_guru.factory_method.example.factory.HtmlDialog {
+ Button createButton()
}
note top of refactoring_guru.factory_method.example.factory.HtmlDialog

 * EN: HTML Dialog will produce HTML buttons.
 *
 * RU: HTML-диалог.
 
end note




refactoring_guru.factory_method.example.buttons.Button <|.. refactoring_guru.factory_method.example.buttons.WindowsButton
refactoring_guru.factory_method.example.buttons.Button <|.. refactoring_guru.factory_method.example.buttons.HtmlButton
refactoring_guru.factory_method.example.factory.Dialog <|-- refactoring_guru.factory_method.example.factory.WindowsDialog
refactoring_guru.factory_method.example.factory.Dialog <|-- refactoring_guru.factory_method.example.factory.HtmlDialog
@enduml